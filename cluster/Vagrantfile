#!/usr/bin/env ruby
# ^syntax detection
#
# PLUGIN DETECTION
#
%w(vagrant-berkshelf vagrant-lxc).each do |plugin|
  fail "#{plugin} not found, exiting." unless Vagrant.has_plugin?(plugin)
end
#
# NODE CONFIGURATION
#
# Helper function to populate nodes
def pop(name, run_list, ip, count)
  ip = ip.rpartition('.')
  nodes = []
  1.upto(count) do |n|
    nodes.push(name: "#{name}#{format('%02d', n)}",
               ip:   "#{ip[0]}.#{ip[-1].to_i + n}",
               run_list: run_list)
  end
  nodes
end
# Populate nodes
masters = pop('master', ['recipe[mesos::master]'], '172.18.1.10', 1)
slaves  = pop('slave',  ['recipe[mesos::slave]'],  '172.18.2.10', 1)
# Simulate Chef::Search
masters.map do |n|
  n[:attributes] = { mesos: { master: { flags: { ip: n[:ip] } } } }
end
slaves.map do |n|
  n[:attributes] = { mesos: { slave: { flags: {
    ip: n[:ip],
    master: masters.map { |m| "#{m[:ip]}:5050" }.join(',')
  } } } }
end
# Sum up all nodes
nodes = masters + slaves
#
# VAGRANT CONFIGURATION
#
Vagrant.configure(2) do |config|
  # LXC box from Atlas
  config.vm.box = 'fgrehm/centos-6-64-lxc'
  # Set up nodes
  nodes.each do |node|
    config.vm.define node[:name] do |v|
      # Set up hostname
      v.vm.hostname = node[:name]
      # Connnect to private network
      v.vm.network 'private_network', ip: node[:ip], netmask: '255.255.0.0', lxc__bridge_name: 'virbr0'
      # Provision with Chef
      v.vm.provision :chef_zero do |chef|
        chef.nodes_path = ''
        chef.run_list   = node[:run_list]
        chef.json       = node[:attributes]
      end
    end
  end
end
